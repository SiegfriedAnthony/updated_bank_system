import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Random;

/**
 * A class for representing bank accounts.
 */
public class BankAccount {
    /**
     * The account number. It should be exactly 8 characters long, all digits.
     */
    private String accountNumber;

    /**
     * The account balance.
     */
    protected MonetaryValue balance;

    /**
     * The date on which the account was opened.
     */
    protected LocalDate dateOpened;

    /**
     * The name of the account holder.
     */
    private Name name;

    /**
     * A random number generator to be used in the {@code newAccountNumber()} method.
     */
    private static Random generator = new Random(33);

    /**
     * A list of all account numbers that have been used so far.
     * <p>
     * <b>Note:</b> Constructors of this class must make sure to update this list.
     */
    private static ArrayList<String> accountNumbers = new ArrayList<>();

    /**
     * Constructs a bank account for an account holder with the given name.
     * Assigns a new unused valid account number (generated by the
     * {@code newAccountNumber()} method) as the account number.
     * Assigns zero as the balance.
     * Assigns today's date (via the static
     * <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/LocalDate.html#now()" target="_blank">now() method</a>
     * of the {@code LocalDate} class) as the date opened.
     * And assigns the specified name as the account holder's name.
     * @param name The name of the account holder
     */
    public BankAccount(Name name) {
        this.accountNumber = newAccountNumber();
        accountNumbers.add(accountNumber);
        this.balance = MonetaryValue.ZERO;
        this.dateOpened = LocalDate.now();
        this.name = name;
    }

    /**
     * Returns a new account number that is valid: exactly 8 characters long, all digits.
     * The account number is unused: no bank account has used it yet.
     * @return A new unused valid account number
     */
    private static String newAccountNumber() {
        int min = 10_000_000, max = 99_999_999;
        String accountNumber;

        do {
            int randomIntInRange = generator.nextInt(max - min) + min;
            accountNumber = String.valueOf(randomIntInRange);
        } while (accountNumbers.contains(accountNumber));

        return accountNumber;
    }

    // method to help check if a new account number is valid
    private static boolean isNumeric(String strNum) {
        if (strNum == null) {
            return false;
        } try {
            int accountNumber = Integer.parseInt(strNum);
        } catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

    /**
     * Constructs a new bank account based on the specified information.
     * @param accountNumber The account number
     * @param balance The balance
     * @param dateOpened The date on which the account was opened
     * @param name The name of the account holder
     * @throws InvalidAccountNumberException If the specified account number isn't exactly
     *         8 characters long, or if it contains any non-digit characters
     */
    public BankAccount(String accountNumber, MonetaryValue balance, LocalDate dateOpened, Name name)
            throws InvalidAccountNumberException {
        if (accountNumber.length() != 8 || !isNumeric(accountNumber)) {
            throw new InvalidAccountNumberException(accountNumber);
        }
        this.accountNumber = accountNumber;
        this.balance = balance;
        this.dateOpened = dateOpened;
        this.name = name;
    }

    /**
     * Returns the account number of this bank account.
     * @return The account number
     */
    public String getAccountNumber() {
        return accountNumber;
    }

    /**
     * Returns the balance of this bank account.
     * @return MonetaryValue The balance
     */
    public MonetaryValue getBalance() {
        return balance;
    }

    /**
     * Returns a string representation of this bank account, suitable for printing
     * to a .csv (comma-separated values) file. For example:
     * <p>
     * {@code "BankAccount,11112222,150.0,2020-8-23,John Adam Smith"}
     * @return A string representation of this bank account
     */
    @Override
    public String toString() {
        return "BankAccount," +
                accountNumber + "," +
                balance.toDouble() + "," +
                dateOpened.toString() + "," +
                name.toString();
    }

    /**
     * Determines whether this bank account is equal to {@code o}. They are
     * considered equal if and only if {@code o} refers to an instance of
     * {@code BankAccount} whose account number, balance, date opened, and name
     * are equal to the corresponding fields of this bank account.
     * @param o The thing to compare this bank account with
     * @return {@code true} if this bank account is equal to {@code o}, {@code false} otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (o instanceof BankAccount) {
            BankAccount other = (BankAccount)o;
            return this.name.equals(other.name) && this.balance.equals(other.balance)
                    && this.dateOpened.equals(other.dateOpened) && this.accountNumber.equals(other.accountNumber);
        } else {
            return false;
        }
    }

    /**
     * Deposits the specified amount of money into this bank account.
     * @param amount The amount of money to deposit
     * @throws NegativeMonetaryValueException If the specified amount of money is negative
     */
    public void deposit(MonetaryValue amount) throws NegativeMonetaryValueException {
        if (amount.toDouble() < 0) {
            throw new NegativeMonetaryValueException(amount);
        }
        balance = balance.plus(amount);
    }

    /**
     * Withdraws the specified amount of money from this bank account. This will be
     * successful only if there are sufficient funds in this account for the withdrawal
     * to occur; otherwise, nothing is withdrawn. That is, if attempting to withdraw
     * desired amount would put the balance below zero, nothing should be withdrawn.
     * @param amount The amount of money to withdraw
     * @throws NegativeMonetaryValueException If the specified amount of money is negative
     * @throws InsufficientFundsException If the amount to withdraw is greater than the balance
     */
    public void withdraw(MonetaryValue amount)
            throws NegativeMonetaryValueException, InsufficientFundsException {
        if (amount.toDouble() < 0) {
            throw new NegativeMonetaryValueException(amount);
        } if (amount.toDouble() > balance.toDouble()) {
            throw new InsufficientFundsException(balance, amount);
        } balance = balance.minus(amount);
    }
}
